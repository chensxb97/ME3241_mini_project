# 1 "main.c"
# 1 "<built-in>"
# 1 "<command line>"
# 1 "main.c"



# 1 "gba.h" 1







typedef unsigned char u8;
typedef unsigned short u16;
typedef unsigned int u32;

typedef signed char s8;
typedef signed short s16;
typedef signed int s32;

typedef unsigned char byte;
typedef unsigned short hword;
typedef unsigned int word;
# 211 "gba.h"
enum
{
    VBLANK_HANDLER,
    HBLANK_HANDLER,
    VCOUNT_HANDLER,
    TIMER0_HANDLER,
    TIMER1_HANDLER,
    TIMER2_HANDLER,
    TIMER3_HANDLER,
    SERIAL_COM_HANDLER,
    DMA0_HANDLER,
    DMA1_HANDLER,
    DMA2_HANDLER,
    DMA3_HANDLER,
    KEYS_HANDLER,
    CART_HANDLER,
    MAX_INTERRUPT_HANDLERS,
};
# 267 "gba.h"
typedef void (*fp)(void);
# 5 "main.c" 2
# 1 "sprites.h" 1





int palette[] = {
((0) + (0<<5) + (0<<10)),
((31) + (31<<5) + (31<<10)),
((0) + (31<<5) + (31<<10)),
((26) + (26<<5) + (26<<10)),
((9) + (9<<5) + (9<<10)),
((31) + (31<<5) + (0<<10)),
((31) + (0<<5) + (0<<10)),
((0) + (0<<5) + (31<<10)),
((11) + (8<<5) + (3<<10)),
((27) + (27<<5) + (27<<10)),
((16) + (16<<5) + (16<<10)),
((31) + (17<<5) + (17<<10)),
((31) + (24<<5) + (24<<10)),
((27) + (0<<5) + (0<<10)),
((0) + (16<<5) + (0<<10)),
((0) + (31<<5) + (0<<10)),
((16) + (31<<5) + (16<<10)),
((23) + (31<<5) + (23<<10))
};




u16 sprites[] = {


0,0,0,0,0,0,1,1,
0,0,0,0,0,1,1,2,
0,0,0,0,0,1,2,2,
0,0,0,3,0,0,1,1,
0,0,3,3,3,1,1,1,
0,0,3,3,3,1,1,1,
0,0,3,3,3,1,1,1,
0,4,3,4,3,1,1,1,

1,0,0,0,0,0,0,0,
2,0,0,0,0,0,0,0,
2,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
1,1,1,3,0,0,0,0,
0,0,0,0,0,0,0,0,

0,4,3,4,3,1,1,1,
0,0,0,0,0,1,1,1,
0,0,0,0,0,1,1,0,
0,0,0,0,0,1,1,0,
0,0,0,0,0,1,1,0,
0,0,0,0,0,1,1,0,
0,0,0,0,0,1,1,0,
0,0,0,0,0,3,1,1,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,



0,0,0,0,0,0,1,1,
0,0,0,0,0,1,1,2,
0,0,0,0,0,1,2,2,
0,0,0,3,0,0,1,1,
0,0,3,3,3,1,1,1,
0,0,3,3,3,1,1,1,
0,0,3,3,3,1,1,1,
0,4,3,4,3,1,1,1,

1,0,0,0,0,0,0,0,
2,0,0,0,0,0,0,0,
2,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
1,1,1,3,0,0,0,0,
0,0,0,0,0,0,0,0,

0,4,3,4,3,1,1,1,
0,0,5,6,5,1,1,1,
0,0,5,6,5,1,1,0,
0,0,0,5,0,1,1,0,
0,0,0,5,0,1,1,0,
0,0,0,0,0,1,1,0,
0,0,0,0,0,1,1,0,
0,0,0,0,0,3,1,1,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,



0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,2,
0,0,0,0,0,0,0,2,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,1,
0,0,0,0,3,1,1,1,
0,0,0,0,0,0,0,0,

1,1,0,0,0,0,0,0,
2,1,1,0,0,0,0,0,
2,2,1,0,0,0,0,0,
1,1,0,0,3,0,0,0,
1,1,1,3,3,3,0,0,
1,1,1,3,3,3,0,0,
1,1,1,3,3,3,0,0,
1,1,1,3,4,3,4,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

1,1,1,3,4,3,4,0,
1,1,1,0,0,0,0,0,
0,1,1,0,0,0,0,0,
0,1,1,0,0,0,0,0,
0,1,1,0,0,0,0,0,
0,1,1,0,0,0,0,0,
0,1,1,0,0,0,0,0,
1,1,3,0,0,0,0,0,



0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,2,
0,0,0,0,0,0,0,2,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,1,
0,0,0,0,3,1,1,1,
0,0,0,0,0,0,0,0,

1,1,0,0,0,0,0,0,
2,1,1,0,0,0,0,0,
2,2,1,0,0,0,0,0,
1,1,0,0,3,0,0,0,
1,1,1,3,3,3,0,0,
1,1,1,3,3,3,0,0,
1,1,1,3,3,3,0,0,
1,1,1,3,4,3,4,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

1,1,1,3,4,3,4,0,
1,1,1,5,6,5,0,0,
0,1,1,5,6,5,0,0,
0,1,1,0,5,0,0,0,
0,1,1,0,5,0,0,0,
0,1,1,0,0,0,0,0,
0,1,1,0,0,0,0,0,
1,1,3,0,0,0,0,0,



1,1,1,1,1,1,1,1,
1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,


1,1,1,1,1,1,1,1,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,




1,1,1,1,1,1,1,1,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


1,1,1,1,1,1,1,1,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,




1,1,1,1,1,1,1,1,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


1,1,1,1,1,1,1,1,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,


0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,
1,1,1,1,1,1,1,1,



1,1,1,1,1,1,1,1,
1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,


1,1,1,1,1,1,1,1,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


1,1,1,1,1,1,1,1,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


1,1,1,1,1,1,1,1,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




1,1,1,1,1,1,1,1,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


1,1,1,1,1,1,1,1,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,


1,1,1,1,1,1,1,1,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


1,1,1,1,1,1,1,1,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,0,0,0,0,0,0,0,
0,0,0,6,6,6,0,0,
0,0,6,12,12,11,6,0,
0,6,12,11,11,6,6,6,
0,6,12,11,6,6,6,6,
0,6,12,11,6,6,6,6,
0,0,6,12,11,6,6,6,
0,0,0,6,12,11,6,6,


0,0,0,0,0,0,0,0,
0,0,6,6,6,0,0,0,
0,6,12,12,11,6,0,0,
6,12,11,6,6,6,6,0,
6,11,11,6,6,6,6,0,
6,6,6,6,6,6,6,0,
6,6,6,6,6,6,0,0,
6,6,6,6,6,0,0,0,


0,0,0,6,12,11,6,6,
0,0,0,0,6,12,6,6,
0,0,0,0,6,12,11,6,
0,0,0,0,0,6,11,6,
0,0,0,0,0,0,6,6,
0,0,0,0,0,0,6,6,
0,0,0,0,0,0,0,6,
0,0,0,0,0,0,0,0,



6,6,6,6,6,0,0,0,
6,6,6,6,0,0,0,0,
6,6,6,0,0,0,0,0,
6,6,6,0,0,0,0,0,
6,6,0,0,0,0,0,0,
6,6,0,0,0,0,0,0,
6,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,0,0,0,0,0,0,0,
0,0,0,3,3,3,0,0,
0,0,3,4,4,10,3,0,
0,3,4,10,10,3,3,3,
0,3,4,10,3,3,3,3,
0,3,4,10,3,3,3,3,
0,0,3,4,10,3,3,3,
0,0,0,3,4,10,3,3,


0,0,0,0,0,0,0,0,
0,0,3,3,3,0,0,0,
0,3,4,4,10,3,0,0,
3,4,10,3,3,3,3,0,
3,10,10,3,3,3,3,0,
3,3,3,3,3,3,3,0,
3,3,3,3,3,3,0,0,
3,3,3,3,3,0,0,0,


0,0,0,3,4,10,3,3,
0,0,0,0,3,4,3,3,
0,0,0,0,3,4,10,3,
0,0,0,0,0,3,10,3,
0,0,0,0,0,0,3,3,
0,0,0,0,0,0,3,3,
0,0,0,0,0,0,0,3,
0,0,0,0,0,0,0,0,



3,3,3,3,3,0,0,0,
3,3,3,3,0,0,0,0,
3,3,3,0,0,0,0,0,
3,3,3,0,0,0,0,0,
3,3,0,0,0,0,0,0,
3,3,0,0,0,0,0,0,
3,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,0,0,0,0,0,0,0,
0,0,0,14,14,15,0,0,
0,0,14,15,15,17,15,0,
0,14,15,17,15,17,17,15,
0,14,15,15,17,17,17,17,
0,14,15,17,15,17,17,17,
0,14,15,17,17,17,17,17,
0,14,15,15,15,17,17,17,


0,0,0,0,0,0,0,0,
0,0,16,16,16,0,0,0,
0,16,16,17,16,16,0,0,
15,16,17,16,17,16,16,0,
17,17,17,16,17,16,16,0,
17,17,17,17,16,17,16,0,
17,17,17,17,17,16,16,0,
17,17,17,17,16,17,16,0,


0,0,14,15,17,15,17,17,
0,0,0,14,15,15,15,17,
0,0,0,0,14,15,17,15,
0,0,0,0,0,14,15,15,
0,0,0,0,0,0,14,15,
0,0,0,0,0,0,0,14,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


17,17,17,16,17,16,0,0,
17,17,16,17,16,0,0,0,
17,16,17,16,0,0,0,0,
16,17,16,0,0,0,0,0,
17,16,0,0,0,0,0,0,
16,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,0,0,0,0,6,6,6,
0,0,0,0,0,6,6,6,
0,0,0,0,13,6,6,13,
0,0,0,13,13,13,6,13,
0,0,0,13,13,13,6,13,
0,0,13,13,13,13,6,13,
0,0,13,13,13,13,6,13,
0,6,13,13,13,0,0,13,


6,6,6,0,0,0,0,0,
6,6,6,0,0,0,0,0,
13,6,6,13,0,0,0,0,
13,6,13,13,13,0,0,0,
13,6,13,13,13,0,0,0,
13,6,13,13,13,13,0,0,
13,6,13,13,13,13,0,0,
13,0,0,13,13,13,6,0,


0,6,13,13,0,0,0,13,
0,6,6,13,0,0,0,13,
0,6,6,13,0,0,0,6,
0,6,6,13,0,0,0,6,
6,6,6,6,0,0,6,6,
6,6,6,6,0,0,6,6,
6,6,6,6,0,0,6,6,
0,6,6,0,0,0,0,6,


13,0,0,13,13,13,6,0,
6,0,0,0,13,6,6,0,
6,0,0,0,13,6,6,0,
6,0,0,0,13,6,6,0,
6,6,0,0,6,6,6,6,
6,6,0,0,6,6,6,6,
6,6,0,0,6,6,6,6,
6,0,0,0,0,6,6,0,




0,0,0,1,1,1,6,6,
0,0,0,1,1,1,6,6,
0,0,0,1,1,1,6,6,
0,0,0,1,1,1,6,6,
0,0,0,1,1,1,6,6,
0,0,0,6,6,6,1,1,
0,0,0,6,6,6,1,1,
0,0,0,0,6,6,1,1,


6,1,1,1,6,0,0,0,
6,1,1,1,6,0,0,0,
6,1,1,1,6,0,0,0,
6,1,1,1,6,0,0,0,
6,1,1,1,6,0,0,0,
1,6,6,6,6,0,0,0,
1,6,6,6,6,0,0,0,
1,6,6,6,0,0,0,0,


0,0,0,0,6,6,1,1,
0,0,0,0,6,6,1,1,
0,0,0,0,1,1,6,6,
0,0,0,0,0,1,6,6,
0,0,0,0,0,1,6,6,
0,0,0,0,0,1,6,6,
0,0,0,0,0,1,6,6,
0,0,0,0,0,6,6,6,


1,6,6,6,0,0,0,0,
1,6,6,6,0,0,0,0,
6,1,1,1,0,0,0,0,
6,1,1,0,0,0,0,0,
6,1,1,0,0,0,0,0,
6,1,1,0,0,0,0,0,
6,1,1,0,0,0,0,0,
6,6,6,0,0,0,0,0,




0,0,0,0,0,0,0,6,
0,0,0,0,0,0,6,6,
0,0,0,0,0,0,6,6,
0,0,0,0,0,6,6,6,
0,0,0,0,0,6,6,6,
0,0,0,0,0,6,6,6,
0,0,0,0,0,1,6,6,
0,0,0,0,1,1,6,6,


6,0,0,0,0,0,0,0,
6,6,0,0,0,0,0,0,
6,6,0,0,0,0,0,0,
6,6,6,0,0,0,0,0,
6,6,6,0,0,0,0,0,
6,6,6,0,0,0,0,0,
6,1,1,0,0,0,0,0,
6,1,1,1,0,0,0,0,


0,0,0,0,1,1,6,6,
0,0,0,0,1,1,6,6,
0,0,0,0,1,1,6,6,
0,0,0,0,6,6,1,1,
0,0,0,6,6,6,1,1,
0,0,0,6,6,6,1,1,
0,0,0,6,6,6,1,1,
0,0,0,6,6,6,1,1,


6,1,1,1,0,0,0,0,
6,1,1,1,0,0,0,0,
6,1,1,1,0,0,0,0,
1,6,6,6,0,0,0,0,
1,6,6,6,6,0,0,0,
1,6,6,6,6,0,0,0,
1,6,6,6,6,0,0,0,
1,6,6,6,6,0,0,0,




0,0,1,1,7,7,7,1,
0,0,1,1,7,7,7,1,
0,0,6,1,7,7,7,1,
0,0,6,1,7,7,7,1,
0,0,1,1,7,7,7,1,
0,0,3,1,7,7,7,3,
0,4,1,3,7,7,7,3,
0,4,1,3,7,7,4,1,


1,1,1,7,7,7,0,0,
6,1,1,7,7,7,0,0,
6,6,1,7,7,7,0,0,
6,6,1,7,7,7,0,0,
1,1,1,7,7,7,0,0,
1,1,1,7,7,3,0,0,
3,1,1,7,4,1,3,0,
1,3,1,7,4,1,3,0,


0,4,4,1,3,7,4,1,
1,1,4,1,3,7,4,1,
1,1,1,4,3,7,4,1,
0,4,4,4,0,0,4,4,
0,0,0,8,0,0,0,8,
0,0,8,8,0,0,0,8,
0,8,8,8,8,0,8,8,
0,8,8,8,8,0,8,8,


1,3,1,4,1,4,3,0,
1,3,1,4,1,4,1,3,
1,3,1,4,4,1,1,3,
4,4,0,0,4,4,4,0,
8,0,0,0,8,0,0,0,
8,0,0,0,8,8,0,0,
8,8,0,8,8,8,8,0,
8,8,0,8,8,8,8,0,




0,0,3,3,3,3,3,3,
0,0,1,1,3,1,1,1,
0,0,1,1,3,1,1,1,
0,0,3,3,3,3,3,3,
0,0,1,1,3,1,1,1,
0,0,7,7,7,7,7,7,
0,0,7,7,7,7,7,7,
0,0,1,1,7,7,7,1,


3,3,3,3,3,3,0,0,
1,1,1,1,1,1,0,0,
1,1,1,1,1,1,0,0,
3,3,3,3,3,3,0,0,
1,1,1,1,1,1,0,0,
7,7,7,7,7,7,0,0,
7,7,7,7,7,7,0,0,
1,1,1,7,7,7,0,0,


0,0,1,1,7,7,7,1,
0,0,6,1,7,7,7,1,
0,0,6,1,7,7,7,1,
0,0,6,1,7,7,7,1,
0,0,1,1,7,7,7,1,
0,0,6,1,7,7,7,1,
0,0,6,1,7,7,7,1,
0,0,6,1,7,7,7,1,


1,1,1,7,7,7,0,0,
6,6,1,7,7,7,0,0,
6,6,1,7,7,7,0,0,
6,6,1,7,7,7,0,0,
1,1,1,7,7,7,0,0,
6,6,1,7,7,7,0,0,
6,6,1,7,7,7,0,0,
1,6,1,7,7,7,0,0,




0,0,7,7,7,7,7,7,
0,0,7,7,7,7,7,7,
0,0,1,1,7,7,7,1,
0,0,1,1,7,7,7,1,
0,0,6,1,7,7,7,1,
0,0,6,1,7,7,7,1,
0,0,6,1,7,7,7,1,
0,0,1,1,7,7,7,1,


7,7,7,7,7,7,0,0,
7,7,7,7,7,7,0,0,
1,1,1,7,7,7,0,0,
1,1,1,7,7,7,0,0,
6,6,1,7,7,7,0,0,
6,6,1,7,7,7,0,0,
6,6,1,7,7,7,0,0,
1,1,1,7,7,7,0,0,


0,0,6,1,7,7,7,1,
0,0,6,1,7,7,7,1,
0,0,1,1,3,1,1,1,
0,0,1,1,3,1,1,1,
0,0,3,3,3,3,3,3,
0,0,6,1,3,1,1,7,
0,0,1,1,3,1,1,7,
0,0,6,1,3,1,1,6,


6,6,1,7,7,7,0,0,
6,6,1,7,7,7,0,0,
1,1,1,1,1,1,0,0,
1,1,1,1,1,1,0,0,
3,3,3,3,3,3,0,0,
7,6,6,1,1,1,0,0,
7,1,1,1,1,1,0,0,
6,6,6,1,1,1,0,0,




0,0,1,1,1,1,1,1,
0,0,1,1,1,6,1,1,
0,0,1,1,1,1,1,1,
0,0,1,1,1,1,1,1,
0,0,1,1,1,6,1,1,
0,0,3,3,3,6,3,3,
0,0,1,1,1,1,1,1,
0,0,1,1,1,6,1,1,


1,1,1,1,1,1,0,0,
1,1,1,6,1,1,0,0,
1,1,1,1,1,1,0,0,
1,1,1,1,1,1,0,0,
1,1,1,6,1,1,0,0,
3,3,3,6,3,3,0,0,
1,1,1,1,1,1,0,0,
1,1,1,6,1,1,0,0,


0,0,1,1,1,1,1,1,
0,0,1,1,1,6,1,1,
0,0,1,1,1,6,1,1,
0,0,1,1,1,1,1,1,
0,0,1,1,1,6,1,1,
0,0,3,3,3,3,3,3,
0,0,1,3,1,3,1,3,
0,0,1,3,1,3,1,3,


1,1,1,1,1,1,0,0,
1,1,1,6,1,1,0,0,
1,1,1,6,1,1,0,0,
1,1,1,1,1,1,0,0,
1,1,1,6,1,1,0,0,
3,3,3,3,3,3,0,0,
1,3,1,3,1,3,0,0,
1,3,1,3,1,3,0,0,




0,0,0,0,3,3,3,3,
0,0,0,0,1,1,1,1,
0,0,0,0,1,1,3,1,
0,0,0,0,1,1,1,1,
0,0,0,0,1,1,1,1,
0,0,0,0,1,1,1,1,
0,0,0,0,1,1,1,1,
0,0,0,0,3,1,3,1,


3,3,3,3,0,0,0,0,
1,1,1,1,0,0,0,0,
1,1,3,1,0,0,0,0,
1,1,3,1,0,0,0,0,
1,1,3,1,0,0,0,0,
1,1,3,1,0,0,0,0,
1,1,1,1,0,0,0,0,
3,1,3,1,0,0,0,0,


0,0,0,0,3,3,3,7,
0,0,0,0,1,3,1,7,
0,0,0,0,1,3,1,7,
0,0,0,1,3,1,7,7,
0,0,0,1,3,1,7,7,
0,0,1,3,1,7,7,7,
0,0,1,3,1,7,7,7,
0,0,3,3,3,7,7,7,


7,7,7,7,0,0,0,0,
7,7,7,7,0,0,0,0,
7,7,7,7,0,0,0,0,
7,7,7,1,3,0,0,0,
7,7,7,1,3,0,0,0,
7,7,7,7,1,3,0,0,
7,7,0,7,1,3,0,0,
7,7,7,7,3,3,0,0,




0,0,0,0,0,0,1,1,
0,0,0,0,0,0,1,1,
0,0,0,0,0,0,1,1,
0,0,0,0,0,0,1,1,
0,0,0,0,0,0,1,1,
0,0,0,0,0,1,1,1,
0,0,0,0,0,1,1,1,
0,0,0,0,0,1,1,1,


3,1,0,0,0,0,0,0,
3,1,0,0,0,0,0,0,
3,1,0,0,0,0,0,0,
3,1,0,0,0,0,0,0,
3,1,0,0,0,0,0,0,
1,3,1,0,0,0,0,0,
1,3,1,0,0,0,0,0,
1,3,1,0,0,0,0,0,


0,0,0,0,0,1,1,1,
0,0,0,0,0,1,1,1,
0,0,0,0,0,1,1,1,
0,0,0,0,3,3,3,3,
0,0,0,0,7,7,7,7,
0,0,0,0,7,7,7,7,
0,0,0,0,3,1,3,1,
0,0,0,0,3,1,3,1,


1,3,1,0,0,0,0,0,
1,3,1,0,0,0,0,0,
1,3,1,0,0,0,0,0,
3,3,3,3,0,0,0,0,
7,7,7,7,0,0,0,0,
7,7,7,7,0,0,0,0,
3,1,3,1,0,0,0,0,
3,1,3,1,0,0,0,0,




0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,3,
0,0,0,0,0,0,0,3,
0,0,0,0,0,0,0,3,
0,0,0,0,0,0,0,3,
0,0,0,0,0,0,0,3,
0,0,0,0,0,0,0,1,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
3,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,


0,0,0,0,0,0,1,4,
0,0,0,0,0,0,1,1,
0,0,0,0,0,0,3,3,
0,0,0,0,0,0,3,4,
0,0,0,0,0,0,3,3,
0,0,0,0,0,0,3,3,
0,0,0,0,0,0,4,3,
0,0,0,0,0,0,1,1,


1,1,0,0,0,0,0,0,
1,1,0,0,0,0,0,0,
4,3,0,0,0,0,0,0,
4,3,0,0,0,0,0,0,
4,3,0,0,0,0,0,0,
4,3,0,0,0,0,0,0,
4,3,0,0,0,0,0,0,
3,1,0,0,0,0,0,0,




0,0,0,0,0,0,0,0,
0,0,0,3,3,9,9,3,
0,4,0,3,3,3,3,3,
4,4,4,3,3,3,3,3,
4,10,3,3,3,3,3,10,
4,4,10,10,3,3,10,10,
4,4,10,3,3,3,4,10,
4,4,10,3,3,3,4,10,


9,9,9,0,0,0,0,0,
3,3,9,9,9,0,0,0,
9,3,3,9,9,9,0,0,
10,9,3,3,3,3,0,0,
10,10,9,3,3,9,0,0,
4,10,10,9,3,9,9,0,
3,4,10,9,9,3,9,0,
10,10,3,3,3,3,9,0,


10,10,3,10,3,3,3,4,
4,10,3,10,3,3,3,3,
4,4,10,3,10,3,3,3,
0,4,10,10,3,3,10,3,
0,4,10,10,10,10,3,10,
0,0,4,4,4,10,10,3,
0,0,0,0,4,4,4,10,
0,0,0,0,0,0,4,4,


10,10,3,3,3,3,9,9,
4,4,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,10,3,3,9,0,
3,3,10,3,3,9,3,0,
10,3,3,3,3,3,0,0,
3,4,3,3,3,0,0,0,
4,4,0,0,0,0,0,0,




0,0,1,1,1,1,0,0,
0,1,1,1,1,1,1,0,
0,1,1,0,0,0,1,1,
0,1,1,0,0,0,0,0,
0,1,1,0,0,1,1,1,
0,1,1,0,0,0,1,1,
0,1,1,1,1,1,1,0,
0,0,1,1,1,1,0,0,


0,0,0,1,1,1,0,0,
0,0,1,1,1,1,1,0,
0,1,1,0,0,0,1,1,
0,1,1,0,0,0,1,1,
0,1,1,1,1,1,1,1,
0,1,1,1,1,1,1,1,
0,1,1,0,0,0,1,1,
0,1,1,0,0,0,1,1,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,1,1,0,0,0,1,1,
0,1,1,0,0,0,1,1,
0,1,1,0,0,0,1,1,
0,1,1,1,0,1,1,1,
0,1,1,1,1,1,1,1,
0,1,1,0,1,0,1,1,
0,1,1,0,0,0,1,1,
0,1,1,0,0,0,1,1,


0,1,1,1,1,1,1,1,
0,1,1,1,1,1,1,1,
0,1,1,0,0,0,0,0,
0,1,1,1,1,1,1,1,
0,1,1,1,1,1,1,1,
0,1,1,0,0,0,0,0,
0,1,1,1,1,1,1,1,
0,1,1,1,1,1,1,1,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,0,1,1,1,1,1,0,
0,1,1,1,1,1,1,1,
0,1,1,0,0,0,1,1,
0,1,1,0,0,0,1,1,
0,1,1,0,0,0,1,1,
0,1,1,0,0,0,1,1,
0,1,1,1,1,1,1,1,
0,0,1,1,1,1,1,0,


0,1,1,0,0,0,1,1,
0,1,1,0,0,0,1,1,
0,1,1,0,0,0,1,1,
0,1,1,0,0,0,1,1,
0,0,1,1,0,1,1,0,
0,0,1,1,0,1,1,0,
0,0,0,1,1,1,0,0,
0,0,0,1,1,1,0,0,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,1,1,1,1,1,1,1,
0,1,1,1,1,1,1,1,
0,1,1,0,0,0,0,0,
0,1,1,1,1,1,1,1,
0,1,1,1,1,1,1,1,
0,1,1,0,0,0,0,0,
0,1,1,1,1,1,1,1,
0,1,1,1,1,1,1,1,


0,1,1,1,1,1,1,0,
0,1,1,1,1,1,1,1,
0,1,1,0,0,0,1,1,
0,1,1,0,0,0,1,1,
0,1,1,1,1,1,1,0,
0,1,1,1,1,1,0,0,
0,1,1,0,1,1,1,0,
0,1,1,0,0,1,1,1,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,1,1,1,1,1,1,0,
0,1,1,1,1,1,1,1,
0,1,1,0,0,0,1,1,
0,1,1,1,1,1,1,0,
0,1,1,1,1,1,0,0,
0,1,1,0,0,0,0,0,
0,1,1,0,0,0,0,0,
0,1,1,0,0,0,0,0,


0,1,1,0,0,0,0,0,
0,1,1,0,0,0,0,0,
0,1,1,0,0,0,0,0,
0,1,1,0,0,0,0,0,
0,1,1,0,0,0,0,0,
0,1,1,0,0,0,0,0,
0,1,1,1,1,1,1,1,
0,1,1,1,1,1,1,1,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,0,0,1,1,1,0,0,
0,0,1,1,1,1,1,0,
0,1,1,0,0,0,1,1,
0,1,1,0,0,0,1,1,
0,1,1,1,1,1,1,1,
0,1,1,1,1,1,1,1,
0,1,1,0,0,0,1,1,
0,1,1,0,0,0,1,1,


0,1,1,0,0,0,1,1,
0,1,1,0,0,0,1,1,
0,1,1,0,0,0,1,1,
0,0,1,1,0,1,1,0,
0,0,0,1,1,1,0,0,
0,0,0,1,1,1,0,0,
0,0,0,1,1,1,0,0,
0,0,0,1,1,1,0,0,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,0,0,1,1,1,0,0,
0,0,1,1,1,1,1,0,
0,1,1,0,0,0,1,1,
0,1,1,0,0,0,1,1,
0,1,1,1,1,1,1,1,
0,1,1,1,1,1,1,1,
0,1,1,0,0,0,1,1,
0,1,1,0,0,0,1,1,


0,0,1,1,1,1,0,0,
0,1,1,1,1,1,1,0,
0,1,1,0,0,0,1,1,
0,1,1,0,0,0,0,0,
0,1,1,0,0,1,1,1,
0,1,1,0,0,0,1,1,
0,1,1,1,1,1,1,0,
0,0,1,1,1,1,0,0,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,0,0,1,1,1,0,0,
0,0,1,1,1,1,1,0,
0,1,1,0,0,0,1,1,
0,1,1,0,0,0,1,1,
0,1,1,1,1,1,1,1,
0,1,1,1,1,1,1,1,
0,1,1,0,0,0,1,1,
0,1,1,0,0,0,1,1,


0,0,1,1,1,1,1,0,
0,0,1,1,1,1,1,0,
0,0,0,1,1,1,0,0,
0,0,0,1,1,1,0,0,
0,0,0,1,1,1,0,0,
0,0,0,1,1,1,0,0,
0,0,1,1,1,1,1,0,
0,0,1,1,1,1,1,0,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,1,1,0,0,0,1,1,
0,1,1,0,0,0,1,1,
0,1,1,1,0,0,1,1,
0,1,1,1,1,0,1,1,
0,1,1,0,1,1,1,1,
0,1,1,0,0,1,1,1,
0,1,1,0,0,0,1,1,
0,1,1,0,0,0,1,1,


0,0,0,1,1,1,1,0,
0,0,1,1,1,1,1,1,
0,1,1,0,0,1,1,0,
0,1,1,0,1,1,0,0,
0,0,0,1,1,0,0,0,
0,0,0,1,1,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,1,1,0,0,0,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,1,1,0,0,0,0,0,
0,1,1,0,0,0,0,0,
0,1,1,0,0,0,0,0,
0,1,1,0,0,0,0,0,
0,1,1,0,0,0,0,0,
0,1,1,0,0,0,0,0,
0,1,1,1,1,1,1,1,
0,1,1,1,1,1,1,1,


0,1,1,0,0,0,1,1,
0,1,1,0,0,0,1,1,
0,1,1,0,0,0,1,1,
0,1,1,0,0,0,1,1,
0,0,1,1,0,1,1,0,
0,0,1,1,0,1,1,0,
0,0,0,1,1,1,0,0,
0,0,0,1,1,1,0,0,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,0,0,1,1,1,0,0,
0,0,1,1,1,1,0,0,
0,0,1,1,1,1,0,0,
0,0,1,0,1,1,0,0,
0,0,0,0,1,1,0,0,
0,0,0,0,1,1,0,0,
0,0,1,1,1,1,1,1,
0,0,1,1,1,1,1,1,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,0,0,1,1,1,0,0,
0,0,1,1,1,1,1,0,
0,1,1,0,0,1,1,1,
0,1,1,0,0,1,1,1,
0,0,0,0,1,1,1,0,
0,0,0,1,1,1,0,0,
0,0,1,1,1,1,1,1,
0,0,1,1,1,1,1,1,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
};
# 6 "main.c" 2
# 1 "/usr/local/arm-thumb-elf/sys-include/stdlib.h" 1 3 4
# 10 "/usr/local/arm-thumb-elf/sys-include/stdlib.h" 3 4
# 1 "/usr/local/arm-thumb-elf/sys-include/_ansi.h" 1 3 4
# 15 "/usr/local/arm-thumb-elf/sys-include/_ansi.h" 3 4
# 1 "/usr/local/arm-thumb-elf/sys-include/newlib.h" 1 3 4
# 16 "/usr/local/arm-thumb-elf/sys-include/_ansi.h" 2 3 4
# 1 "/usr/local/arm-thumb-elf/sys-include/sys/config.h" 1 3 4



# 1 "/usr/local/arm-thumb-elf/sys-include/machine/ieeefp.h" 1 3 4
# 5 "/usr/local/arm-thumb-elf/sys-include/sys/config.h" 2 3 4
# 17 "/usr/local/arm-thumb-elf/sys-include/_ansi.h" 2 3 4
# 11 "/usr/local/arm-thumb-elf/sys-include/stdlib.h" 2 3 4



# 1 "/usr/local/lib/gcc-lib/arm-thumb-elf/3.3.6/include/stddef.h" 1 3 4
# 213 "/usr/local/lib/gcc-lib/arm-thumb-elf/3.3.6/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 325 "/usr/local/lib/gcc-lib/arm-thumb-elf/3.3.6/include/stddef.h" 3 4
typedef int wchar_t;
# 15 "/usr/local/arm-thumb-elf/sys-include/stdlib.h" 2 3 4

# 1 "/usr/local/arm-thumb-elf/sys-include/sys/reent.h" 1 3 4
# 14 "/usr/local/arm-thumb-elf/sys-include/sys/reent.h" 3 4
# 1 "/usr/local/arm-thumb-elf/sys-include/sys/_types.h" 1 3 4
# 12 "/usr/local/arm-thumb-elf/sys-include/sys/_types.h" 3 4
typedef long _off_t;
__extension__ typedef long long _off64_t;


typedef int _ssize_t;





# 1 "/usr/local/lib/gcc-lib/arm-thumb-elf/3.3.6/include/stddef.h" 1 3 4
# 354 "/usr/local/lib/gcc-lib/arm-thumb-elf/3.3.6/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 23 "/usr/local/arm-thumb-elf/sys-include/sys/_types.h" 2 3 4


typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;
} _mbstate_t;

typedef int _flock_t;
# 15 "/usr/local/arm-thumb-elf/sys-include/sys/reent.h" 2 3 4




typedef unsigned long __ULong;
# 40 "/usr/local/arm-thumb-elf/sys-include/sys/reent.h" 3 4
struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};


struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};
# 68 "/usr/local/arm-thumb-elf/sys-include/sys/reent.h" 3 4
struct _atexit {
        struct _atexit *_next;
        int _ind;
        void (*_fns[32])(void);
        void *_fnargs[32];
        __ULong _fntypes;
};
# 91 "/usr/local/arm-thumb-elf/sys-include/sys/reent.h" 3 4
struct __sbuf {
        unsigned char *_base;
        int _size;
};






typedef long _fpos_t;
# 156 "/usr/local/arm-thumb-elf/sys-include/sys/reent.h" 3 4
struct __sFILE {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf _bf;
  int _lbfsize;






  void * _cookie;

  int (*_read) (void * _cookie, char *_buf, int _n);
  int (*_write) (void * _cookie, const char *_buf, int _n);

  _fpos_t (*_seek) (void * _cookie, _fpos_t _offset, int _whence);
  int (*_close) (void * _cookie);


  struct __sbuf _ub;
  unsigned char *_up;
  int _ur;


  unsigned char _ubuf[3];
  unsigned char _nbuf[1];


  struct __sbuf _lb;


  int _blksize;
  int _offset;


  struct _reent *_data;



  _flock_t _lock;

};
# 249 "/usr/local/arm-thumb-elf/sys-include/sys/reent.h" 3 4
typedef struct __sFILE __FILE;


struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};
# 280 "/usr/local/arm-thumb-elf/sys-include/sys/reent.h" 3 4
struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;




};
# 532 "/usr/local/arm-thumb-elf/sys-include/sys/reent.h" 3 4
struct _reent
{
  int _errno;




  __FILE *_stdin, *_stdout, *_stderr;

  int _inc;
  char _emergency[25];

  int _current_category;
  const char *_current_locale;

  int __sdidinit;

  void (*__cleanup) (struct _reent *);


  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;


  int _cvtlen;
  char *_cvtbuf;

  union
    {
      struct
        {
          unsigned int _unused_rand;
          char * _strtok_last;
          char _asctime_buf[26];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          __extension__ unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24];
          int _getdate_err;
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
        } _reent;



      struct
        {

          unsigned char * _nextf[30];
          unsigned int _nmalloc[30];
        } _unused;
    } _new;


  struct _atexit *_atexit;
  struct _atexit _atexit0;


  void (**(_sig_func))(int);




  struct _glue __sglue;
  __FILE __sf[3];
};
# 728 "/usr/local/arm-thumb-elf/sys-include/sys/reent.h" 3 4
extern struct _reent *_impure_ptr ;

void _reclaim_reent (struct _reent *);
# 17 "/usr/local/arm-thumb-elf/sys-include/stdlib.h" 2 3 4
# 1 "/usr/local/arm-thumb-elf/sys-include/machine/stdlib.h" 1 3 4
# 18 "/usr/local/arm-thumb-elf/sys-include/stdlib.h" 2 3 4

# 1 "/usr/local/arm-thumb-elf/sys-include/alloca.h" 1 3 4
# 20 "/usr/local/arm-thumb-elf/sys-include/stdlib.h" 2 3 4




typedef struct
{
  int quot;
  int rem;
} div_t;

typedef struct
{
  long quot;
  long rem;
} ldiv_t;
# 45 "/usr/local/arm-thumb-elf/sys-include/stdlib.h" 3 4
extern int __mb_cur_max;



void abort (void) __attribute__ ((noreturn));
int abs (int);
int atexit (void (*__func)(void));
double atof (const char *__nptr);

float atoff (const char *__nptr);

int atoi (const char *__nptr);
long atol (const char *__nptr);
void * bsearch (const void * __key, const void * __base, size_t __nmemb, size_t __size, int (* _compar) (const void *, const void *));




void * calloc (size_t __nmemb, size_t __size);
div_t div (int __numer, int __denom);
void exit (int __status) __attribute__ ((noreturn));
void free (void *);
char * getenv (const char *__string);
char * _getenv_r (struct _reent *, const char *__string);
char * _findenv (const char *, int *);
char * _findenv_r (struct _reent *, const char *, int *);
long labs (long);
ldiv_t ldiv (long __numer, long __denom);
void * malloc (size_t __size);
int mblen (const char *, size_t);
int _mblen_r (struct _reent *, const char *, size_t, _mbstate_t *);
int mbtowc (wchar_t *, const char *, size_t);
int _mbtowc_r (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *);
int wctomb (char *, wchar_t);
int _wctomb_r (struct _reent *, char *, wchar_t, _mbstate_t *);
size_t mbstowcs (wchar_t *, const char *, size_t);
size_t _mbstowcs_r (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *);
size_t wcstombs (char *, const wchar_t *, size_t);
size_t _wcstombs_r (struct _reent *, char *, const wchar_t *, size_t, _mbstate_t *);


int mkstemp (char *);
char * mktemp (char *);


void qsort (void * __base, size_t __nmemb, size_t __size, int(*_compar)(const void *, const void *));
int rand (void);
void * realloc (void * __r, size_t __size);
void srand (unsigned __seed);
double strtod (const char *__n, char **__end_PTR);
double _strtod_r (struct _reent *,const char *__n, char **__end_PTR);
float strtof (const char *__n, char **__end_PTR);






long strtol (const char *__n, char **__end_PTR, int __base);
long _strtol_r (struct _reent *,const char *__n, char **__end_PTR, int __base);
unsigned long strtoul (const char *__n, char **__end_PTR, int __base);
unsigned long _strtoul_r (struct _reent *,const char *__n, char **__end_PTR, int __base);

int system (const char *__string);


long a64l (const char *__input);
char * l64a (long __input);
char * _l64a_r (struct _reent *,long __input);
int on_exit (void (*__func)(int, void *),void * __arg);
void _Exit (int __status) __attribute__ ((noreturn));
int putenv (const char *__string);
int _putenv_r (struct _reent *, const char *__string);
int setenv (const char *__string, const char *__value, int __overwrite);
int _setenv_r (struct _reent *, const char *__string, const char *__value, int __overwrite);

char * gcvt (double,int,char *);
char * gcvtf (float,int,char *);
char * fcvt (double,int,int *,int *);
char * fcvtf (float,int,int *,int *);
char * ecvt (double,int,int *,int *);
char * ecvtbuf (double, int, int*, int*, char *);
char * fcvtbuf (double, int, int*, int*, char *);
char * ecvtf (float,int,int *,int *);
char * dtoa (double, int, int, int *, int*, char**);
int rand_r (unsigned *__seed);

double drand48 (void);
double _drand48_r (struct _reent *);
double erand48 (unsigned short [3]);
double _erand48_r (struct _reent *, unsigned short [3]);
long jrand48 (unsigned short [3]);
long _jrand48_r (struct _reent *, unsigned short [3]);
void lcong48 (unsigned short [7]);
void _lcong48_r (struct _reent *, unsigned short [7]);
long lrand48 (void);
long _lrand48_r (struct _reent *);
long mrand48 (void);
long _mrand48_r (struct _reent *);
long nrand48 (unsigned short [3]);
long _nrand48_r (struct _reent *, unsigned short [3]);
unsigned short *
       seed48 (unsigned short [3]);
unsigned short *
       _seed48_r (struct _reent *, unsigned short [3]);
void srand48 (long);
void _srand48_r (struct _reent *, long);
long long strtoll (const char *__n, char **__end_PTR, int __base);
long long _strtoll_r (struct _reent *, const char *__n, char **__end_PTR, int __base);
unsigned long long strtoull (const char *__n, char **__end_PTR, int __base);
unsigned long long _strtoull_r (struct _reent *, const char *__n, char **__end_PTR, int __base);


void cfree (void *);
# 172 "/usr/local/arm-thumb-elf/sys-include/stdlib.h" 3 4
char * _dtoa_r (struct _reent *, double, int, int, int *, int*, char**);

void * _malloc_r (struct _reent *, size_t);
void * _calloc_r (struct _reent *, size_t, size_t);
void _free_r (struct _reent *, void *);
void * _realloc_r (struct _reent *, void *, size_t);
void _mstats_r (struct _reent *, char *);

int _system_r (struct _reent *, const char *);

void __eprintf (const char *, const char *, unsigned int, const char *);
# 213 "/usr/local/arm-thumb-elf/sys-include/stdlib.h" 3 4

# 7 "main.c" 2



int astro = 2;
int x_astro,y_astro;


int part1 = 15;
int part1_x, part1_y;
int part2 = 16;
int part2_x, part2_y;
int part3 = 17;
int part3_x, part3_y;
int part4 = 18;
int part4_x, part4_y;
int part5 = 19;
int part5_x, part5_y;
int part6 = 20;
int part6_x, part6_y;
int part7 = 21;
int part7_x, part7_y;


int remaining;
int label_heart = 9;
int x_heart1= 0;
int y_heart1=0;
int x_heart2=20;
int y_heart2 = 0;
int x_heart3 = 40;
int y_heart3 = 0;


int meteor = 22;
int x_meteor, y_meteor,movementX,movementY;
int movementSpeed;


int time;


int menu, end, gameWon;
int level = 1;


void Handler(void)
{
    *(u16*)0x4000208 = 0x00;

         if ((*(u16*)0x4000202 & 0x1000) == 0x1000)
         {
                 checkbutton();
         }
         if ((*(u16*)0x4000202 & 0x8) == 0x8)
         {
                 incrementTime();
         }

    *(u16*)0x4000202 = *(u16*)0x4000202;

    *(u16*)0x4000208 = 0x01;
}
void fillPalette(void)
{
    int i;

    for (i = 0; i < 20; i++)
        ((unsigned short *) 0x5000200)[i] = palette[i];
}
void drawSprite(int numb, int N, int x, int y)
{

        *(unsigned short *)(0x7000000 + 8*N) = y | 0x2000;
        *(unsigned short *)(0x7000002 + 8*N) = x | 0x4000;
        *(unsigned short *)(0x7000004 + 8*N) = numb*8;
}

void fillSprites(void)
{
    int i;

    for (i = 0; i < 128*16*16; i++)
        ((unsigned short *) 0x6010000)[i] = (sprites[i*2+1] << 8) + sprites[i*2];


    for(i = 0; i < 128; i++)
        drawSprite(0, i, 240,160);
}




void setup(void)
{
        end = 1;
        menu = 0;
        gameWon = 0;
        fillPalette();
        fillSprites();
        drawSprite(32,4,80,70);
        drawSprite(33,5,96,70);
        drawSprite(32,6,126,70);
        drawSprite(34,7,142,70);
        x_astro = 84;
        y_astro = 80;
        drawSprite(astro,0,x_astro,y_astro);
        menu =1;
}

void setup1(void)
{
        fillPalette();
        fillSprites();


        x_astro = 220;
        y_astro = 140;


        part1_x =220;
        part1_y =100;
        part2_x = 220;
        part2_y = 20;
        part3_x = 170;
        part3_y = 60;
        part4_x = 130;
        part4_y = 100;
        part5_x = 130;
        part5_y = 20;
        part6_x = 90;
        part6_y = 60;
        part7_x = 40;
        part7_y = 20;


        remaining = 3;


        x_meteor = 70;
        y_meteor = 0;
        movementX = movementY = 0;
        movementSpeed = 1.5;


        time = 0;


        drawSprite(astro,0,x_astro,y_astro);


        drawSprite(label_heart,1,x_heart1,y_heart1);
        drawSprite(label_heart,2,x_heart2,y_heart2);
        drawSprite(label_heart,3,x_heart3,y_heart3);


        drawSprite(part1,12,part1_x,part1_y);
        drawSprite(part2,13,part2_x,part2_y);
        drawSprite(part3,14,part3_x,part3_y);
        drawSprite(part4,15,part4_x,part4_y);
        drawSprite(part5,16,part5_x,part5_y);
        drawSprite(part6,17,part6_x,part6_y);
        drawSprite(part7,18,part7_x,part7_y);


        menu = 0;
        end = 0;
        gameWon = 0;

}

void setup2(void)
{
        fillPalette();
        fillSprites();


        x_astro = 220;
        y_astro = 140;


        part1_x =220;
        part1_y =100;
        part2_x = 220;
        part2_y = 20;
        part3_x = 170;
        part3_y = 60;
        part4_x = 130;
        part4_y = 100;
        part5_x = 130;
        part5_y = 20;
        part6_x = 90;
        part6_y = 60;
        part7_x = 40;
        part7_y = 20;


        remaining = 3;


        x_meteor = 70;
        y_meteor = 0;
        movementX = movementY = 0;
        movementSpeed = 2.5;


        time = 0;


        drawSprite(astro,0,x_astro,y_astro);


        drawSprite(label_heart,1,x_heart1,y_heart1);
        drawSprite(label_heart,2,x_heart2,y_heart2);
        drawSprite(label_heart,3,x_heart3,y_heart3);


        drawSprite(part1,12,part1_x,part1_y);
        drawSprite(part2,13,part2_x,part2_y);
        drawSprite(part3,14,part3_x,part3_y);
        drawSprite(part4,15,part4_x,part4_y);
        drawSprite(part5,16,part5_x,part5_y);
        drawSprite(part6,17,part6_x,part6_y);
        drawSprite(part7,18,part7_x,part7_y);


        menu = 0;
        end = 0;
        gameWon = 0;
}

void gameOver(void)
{
        drawSprite(23,0,80,70);
        drawSprite(24,1,96,70);
        drawSprite(25,2,116,70);
        drawSprite(26,3,132,70);
        delay(8000);
}
void playAgain(void)
{
        drawSprite(27,0,80,70);
        drawSprite(28,1,96,70);
        drawSprite(29,2,116,70);
        drawSprite(30,3,132,70);
        drawSprite(31,4,148,70);
        delay(8000);
}

void delay(int s)
{
        int c, d;
        for (c = 1; c <= s; c++)
       for (d = 1; d <= 100; d++)
                {}
}
void moveAsteroid(movement)
{

        if (movementY<200)
        {
                movementY +=movementSpeed;
                drawSprite(meteor,4,x_meteor,movementY);
                drawSprite(meteor,5,x_meteor+40,movementY);
                drawSprite(meteor,6,x_meteor+80,movementY);
                drawSprite(meteor,7,x_meteor+120,movementY);
                hitByAsteroid();
        }
        else movementY = 0;


        if (movementX<230)
        {
                movementX+=movementSpeed;
                drawSprite(meteor,8,movementX,y_meteor);
                drawSprite(meteor,9,movementX,y_meteor+40);
                drawSprite(meteor,10,movementX,y_meteor+80);
                drawSprite(meteor,11,movementX,y_meteor+120);
                hitByAsteroid();
        }
        else movementX = 0;
        delay(100);
}

void checkbutton(void)
{

    u16 buttons = (0x3FF & (~*(volatile u16*)0x4000130));

    if ((buttons & 0x080) == 0x080 && menu ==0 && end ==0)
    {
                 if (menu ==0 && end ==0)
       {
                         if (y_astro<=140)
                                        y_astro = y_astro+2;
                         drawSprite(astro,0,x_astro,y_astro-1);
                 }

    }
         if ((buttons & 0x040) == 0x040 && menu ==0 && end ==0)
         {
                 if (menu==0 && end ==0)
                 {
                         if (y_astro>=5)
                                y_astro = y_astro-2;
                        drawSprite(astro,0,x_astro,y_astro);
                 }
         }
         if ((buttons& 0x010) == 0x010)
         {
                if (menu ==0 && end ==0)
                {
                        if (x_astro<=225)
                                x_astro = x_astro+2;
                        astro = 0;
                        drawSprite(astro,0,x_astro,y_astro);
                }
                else if (menu ==1)
                {
                        astro = 0;
                        x_astro=130;
                        y_astro =80;
                        drawSprite(astro,0, x_astro,y_astro);
                }
         }
         if ((buttons & 0x020) == 0x020)
         {
                 if (menu ==0 && end ==0)
                {
                        if (x_astro>=1)
                                x_astro = x_astro-2;
                        astro = 2;
                        drawSprite(astro,0,x_astro,y_astro);
                }
                else if (menu ==1)
                {
                        astro = 2;
                        x_astro= 84;
                        y_astro = 80;
                        drawSprite(astro,0, x_astro,y_astro);
                }
         }
         hitByAsteroid();
         if ((buttons & 0x001) == 0x001 && end ==0 && menu ==0)
         {
                  pickup();
         }
         if ((buttons & 0x002) == 0x002 && end ==0 && menu ==0)
         {
                  takeoff();
         }
         if ((buttons & 0x008) == 0x008)
         {
                  restartGame();
         }
         if ((buttons & 0x004) == 0x004 && (end == 0 && menu ==0))
         {
                  endGame();
         }

}
void pickup(void)
{

                if (abs(part1_x-x_astro)<8 && abs(part1_y-y_astro)<8)
                {
                        part1_x =20;
                        part1_y =140;
                        drawSprite(part1,12,part1_x,part1_y);
                }
                else if (abs(part2_x-x_astro)<8 && abs(part2_y-y_astro)<8)
                {
                        part2_x =20;
                        part2_y =130;
                        drawSprite(part2,13,part2_x,part2_y);
                }
                else if (abs(part3_x-x_astro)<8 && abs(part3_y-y_astro)<8)
                {
                        part3_x =20;
                        part3_y =120;
                        drawSprite(part3,14,part3_x,part3_y);
                }
                else if (abs(part4_x-x_astro)<8 && abs(part4_y-y_astro)<8)
                {
                        part4_x =20;
                        part4_y =110;
                        drawSprite(part4,15,part4_x,part4_y);
                }
                else if (abs(part5_x-x_astro)<8 && abs(part5_y-y_astro)<8)
                {
                        part5_x =20;
                        part5_y =100;
                        drawSprite(part5,16,part5_x,part5_y);
                }
                else if (abs(part6_x-x_astro)<8 && abs(part6_y-y_astro)<8)
                {
                        part6_x =20;
                        part6_y =90;
                        drawSprite(part6,17,part6_x,part6_y);
                }
                else if (abs(part7_x-x_astro)<8 && abs(part7_y-y_astro)<8)
                {
                        part7_x =20;
                        part7_y =80;
                        drawSprite(part7,18,part7_x,part7_y);
                }
}
void takeoff(void)
{


        if (part1_x ==20 && part2_x ==20 && part3_x ==20 && part4_x ==20 && part5_x ==20 && part6_x ==20
                && part7_x ==20 && (abs(x_astro-part1_x)<15 && y_astro<=part1_y && y_astro>=part7_y))
        {
                x_astro = part1_x;
                y_astro = part1_y;
                drawSprite(astro,0,x_astro,y_astro);
                fly();
        }
}
void fly(void)
{
        while(part1_y >-20)
        {
                part1_y = part1_y - 1;
                part2_y = part2_y - 1;
                part3_y = part3_y - 1;
                part4_y = part4_y - 1;
                part5_y = part5_y - 1;
                part6_y = part6_y - 1;
                part7_y = part7_y - 1;
                y_astro = y_astro -1;
                drawSprite(astro,0,x_astro,y_astro);
                drawSprite(part1,12,part1_x,part1_y);
                drawSprite(part2,13,part2_x,part2_y);
                drawSprite(part3,14,part3_x,part3_y);
                drawSprite(part4,15,part4_x,part4_y);
                drawSprite(part5,16,part5_x,part5_y);
                drawSprite(part6,17,part6_x,part6_y);
                drawSprite(part7,18,part7_x,part7_y);
                delay(100);
        }
        gameWon = 1;
        if (level==1)
        {
                level = level+1;
                setup2();
        }
        else
        {
                level =1;
                endGame();
        }

}
void hitByAsteroid(void)
{

                if ((abs(x_astro-movementX)<8 && abs(y_astro-y_meteor)<8)
                || (abs(x_astro-movementX)<8 && abs(y_astro-y_meteor-40)<8)
                || (abs(x_astro-movementX)<8 && abs(y_astro-y_meteor-80)<8)
                || (abs(x_astro-movementX)<8 && abs(y_astro-y_meteor-120)<8)
                || (abs(x_astro-x_meteor)<8 && abs(y_astro-movementY)<8)
                || (abs(x_astro-x_meteor-40)<8 && abs(y_astro-movementY)<8)
                || (abs(x_astro-x_meteor-80)<8 && abs(y_astro-movementY)<8)
                || (abs(x_astro-x_meteor-120)<8 && abs(y_astro-movementY)<8))
                {
                        x_astro = 220;
                        y_astro = 140;
                        drawSprite(astro,0,x_astro,y_astro);
                        decrementHeart();
                }

}
void incrementTime(void)
{

        if (end==1)
                return;
        time = time +1;
        time_damage();
}
void time_damage(void)
{


        if ((time+6)%15 ==0)
        {
                decrementHeart();
        }
        if ((time+5)%15 ==0)
        {
                incrementHeart();
        }
        if ((time+4)%15==0)
        {
                decrementHeart();
        }
        if ((time+3)%15 ==0)
        {
                incrementHeart();
        }
        if ((time+2)%15 ==0)
        {
                decrementHeart();
        }
        if ((time+1)%15 ==0)
        {
                incrementHeart();
        }
        if (time%15 ==0)
                decrementHeart();
}
void decrementHeart(void)
{

         if (remaining ==3)
         {
                drawSprite(10,remaining,x_heart3,y_heart3);
         }
         else if (remaining == 2)
         {
                drawSprite(10,remaining,x_heart2,y_heart2);
         }
         else
         {
                drawSprite(10,remaining,x_heart1,y_heart1);
         }
         remaining= remaining -1;
         if (remaining <0)
         {
                endGame();
         }
}
void incrementHeart(void)
{

         remaining = remaining +1;
         if (remaining ==3)
         {
                drawSprite(9,remaining,x_heart3,y_heart3);
         }
         else if (remaining == 2)
         {
                drawSprite(9,remaining,x_heart2,y_heart2);
         }
         else if (remaining == 1)
         {
                drawSprite(9,remaining,x_heart1,y_heart1);
         }
}
void restartGame(void)
{

        if (menu ==1)
        {
                if (x_astro ==84)
                {
                        level = 1;
                        setup1();
                }
                else
                {
                        level = 2;
                        setup2();
                }
        }
        else if (end == 0 && menu ==0)
        {
                if (level ==1)
                        setup1();
                else
                        setup2();
        }
}
void endGame(void)
{

        end = 1;
        menu = 0;
        fillPalette();
        fillSprites();
        delay(10000);
        if (gameWon ==0)
                gameOver();
        playAgain();
        setup();
}




int main(void)
{

         *(unsigned short *) 0x4000000 = 0x40 | 0x2 | 0x1000;


         setup();


    (*(unsigned int*)0x3007FFC) = (int)&Handler;
         *(u16*)0x4000200 |= 0x8;
         *(u16*)0x4000200 |= 0x1000;
    *(u16*)0x4000208 = 0x1;


         *(u16*)0x4000132 |= 0x3FF;
         *(u16*)0x4000132 |= (1 << 14);


    *(u16*)0x4000100 = 49152;
    *(u16*)0x4000102 |= 0x0003|0x0080|0x0040;

    while(1)
         {
                        if (end==0)
                        {

                           moveAsteroid();
                        }
         };

        return 0;
}
